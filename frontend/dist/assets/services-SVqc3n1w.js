var F=o=>{throw TypeError(o)};var C=(o,r,e)=>r.has(o)||F("Cannot "+e);var g=(o,r,e)=>(C(o,r,"read from private field"),e?e.call(o):r.get(o)),l=(o,r,e)=>r.has(o)?F("Cannot add the same private member more than once"):r instanceof WeakSet?r.add(o):r.set(o,e),y=(o,r,e,n)=>(C(o,r,"write to private field"),n?n.call(o,e):r.set(o,e),e),s=(o,r,e)=>(C(o,r,"access private method"),e);class U extends Error{constructor(r,e){super(r),this.userMessage=e,this.name="UserFacingError"}}const k={UserFacingError:U};var d,$,m,a,I,E;const u=class u{constructor(r){l(this,a);l(this,$,k);l(this,m);try{y(this,m,r)}catch(e){throw new Error(`${e instanceof Error?e.message:e}`)}}static getInstance(r){try{return g(u,d)||(console.debug("No ErrorHandler instance exists yet. Creating new instance."),y(u,d,new u(r))),console.debug("Returning ErrorHandler instance."),g(u,d)}catch(e){throw new Error(`${e instanceof Error?e.message:e}`)}}handleAndReturn(r,e,n={}){try{const t=r();return t instanceof Promise?t.catch(i=>(s(this,a,E).call(this,i,e,n),n.fallback??Promise.reject(i))):t}catch(t){return s(this,a,E).call(this,t,e,n),n.fallback}}async handleAsync(r,e,n={}){try{return await r()}catch(t){throw s(this,a,E).call(this,t,e,n),t}}handleSync(r,e,n={}){try{return r()}catch(t){throw s(this,a,E).call(this,t,e,n),t}}};d=new WeakMap,$=new WeakMap,m=new WeakMap,a=new WeakSet,I=function(r,e,n){try{return r instanceof Error?`${e}: ${r.message}. Context: ${JSON.stringify(n)}`:`${e}: ${r}. Context: ${JSON.stringify(n)}`}catch(t){throw new Error(`[Error formatting error message: ${t instanceof Error?t.message:t}`)}},E=function(r,e,n={}){try{const t=s(this,a,I).call(this,r,e,n.context??{});g(this,m).error(t);const i=n.userMessage??(r instanceof g(this,$).UserFacingError?r.userMessage:void 0);i&&alert(i)}catch(t){throw new Error(`Error handling error: ${t instanceof Error?t.message:t}`)}},l(u,d,null);let S=u;var f,c,R,x,w;const h=class h{constructor(r){l(this,c);try{r.app.noop()}catch(e){throw new Error(`constructor]: ${e instanceof Error?e.message:e}`)}}static getInstance(r){try{return g(h,f)||(y(h,f,new h(r)),console.log("No existing Logger instance found. Creating new instance.")),console.log("Returning Logger instance."),g(h,f)}catch(e){throw new Error(`${e instanceof Error?e.message:e}`)}}debug(r,e){s(this,c,w).call(this,r,"debug",e)}error(r,e){s(this,c,w).call(this,r,"error",e)}info(r,e){s(this,c,w).call(this,r,"info",e)}warn(r,e){s(this,c,w).call(this,r,"warn",e)}};f=new WeakMap,c=new WeakSet,R=function(){return new Date().toLocaleString("en-US",{year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1})},x=function(r){switch(r){case"debug":return"color: green";case"info":return"color: blue";case"warn":return"color: orange";case"error":return"color: red";default:return"color: black"}},w=function(r,e,n){const t=n,i=s(this,c,R).call(this);try{console.log(`%c[${e.toUpperCase()}]%c ${i} [${t}] %c${r}`,s(this,c,x).call(this,e),"color: gray","color: inherit")}catch(p){console.error(`[${n}.#logMessage]: Encountered an unexpected error: ${p}.`)}t==="Unknown caller"&&console.trace(`[${n}]: Full Stack Trace:`)},l(h,f,null);let b=h;function A(o){console.log("[SERVICE_FACTORY]: Starting service factory...");const r={};if(console.log("[SERVICE_FACTORY]: Initializing Logger and ErrorHandler services"),r.log=b.getInstance(o),r.errors=S.getInstance(r.log),!r.log||!r.errors)throw new Error("[SERVICE_FACTORY]: Logger and/or ErrorHandler failed to initialize.");return r}export{A as serviceFactory};
